/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_fr.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "../../../key_names.h"

#define SMB 1

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sl { ignore-modifiers; };

&sensors { triggers-per-rotation = <30>; };

&left_encoder1 { steps = <60>; };

/ {
    #include "moutis_behaviors.dtsi"
    #include "moutis_macros.dtsi"
    #include "moutis_combos.dtsi"

    combos {
        compatible = "zmk,combos";

        a-acute {
            bindings = <&kp FR_A_GRAVE>;
            key-positions = <10 0>;
            layers = <0>;
        };

        e-grave {
            bindings = <&kp FR_E_GRAVE>;
            key-positions = <12 2>;
            layers = <0>;
        };

        u-grave {
            bindings = <&kp FR_U_GRAVE>;
            key-positions = <4 14>;
            layers = <0>;
        };

        e-acute {
            bindings = <&kp FR_E_ACUTE>;
            key-positions = <12 22>;
            layers = <0>;
        };

        Switch-layer {
            bindings = <&mo 6>;
            key-positions = <16 17 18 19>;
        };

        switch_sensors {
            bindings = <&mo 6>;
            key-positions = <10 11 12 13>;
        };
    };

    macros {
        delete_word: delete_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LEFT)) &kp BACKSPACE>;
            label = "DELETE_WORD";
        };

        smart_space: smart_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FR_DOT &kp FR_SPACE &sk LEFT_SHIFT>;
            label = "SMART_SPACE";
        };
    };

    behaviors {
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp FR_DOT>, <&kp FR_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp FR_COMMA>, <&kp FR_SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pars: pars {
            compatible = "zmk,behavior-mod-morph";
            label = "PARS";
            bindings = <&kp FR_LEFT_PARENTHESIS>, <&kp FR_RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETS";
            bindings = <&kp FR_LEFT_BRACKET>, <&kp FR_RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        braces: braces {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACES";
            bindings = <&kp FR_LEFT_BRACE>, <&kp FR_RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        less_greater_than: less_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "LESS_GREATER_THAN";
            bindings = <&kp FR_LESS_THAN>, <&kp FR_GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grave_hat: grave_hat {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_HAT";
            bindings = <&kp FR_GRAVE>, <&kp FR_CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sltog2: sltog2 {
            compatible = "zmk,behavior-hold-tap";
            label = "SLTOG2";
            bindings = <&mo>, <&my_sl2>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tri_space: tri_space {
            compatible = "zmk,behavior-hold-tap";
            label = "TRI_SPACE";
            bindings = <&mo>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <16 17 18 7>;
        };

        stkp: stkp {
            compatible = "zmk,behavior-hold-tap";
            label = "STKP";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        symbol_options: symbol_options {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_OPTIONS";
            bindings = <&sl 2>, <&to 2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slmo: slmo {
            compatible = "zmk,behavior-hold-tap";
            label = "SLMO";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        sl_backspace: sl_backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_BACKSPACE";
            bindings = <&mo>, <&delete_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        question_excl: question_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCL";
            bindings = <&kp FR_QUESTION>, <&kp FR_EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minusunderscore: minusunderscore {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUSUNDERSCORE";
            bindings = <&kp FR_MINUS>, <&kp FR_UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        Fslashpipe: Fslashpipe {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLASHPIPE";
            bindings = <&kp FR_BACKSLASH>, <&kp FR_PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_quotes: apos_quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_QUOTES";
            bindings = <&kp FR_APOS>, <&kp FR_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        my_sl2: my_sl2 {
            compatible = "zmk,behavior-sticky-key";
            label = "MY_SL2";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <200>;
        };

        sltog: sltog {
            compatible = "zmk,behavior-hold-tap";
            label = "SLTOG";
            bindings = <&mo>, <&my_sl1>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        my_sl1: my_sl1 {
            compatible = "zmk,behavior-sticky-key";
            label = "MY_SL1";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <200>;
            quick-release;
        };

        skmo: skmo {
            compatible = "zmk,behavior-hold-tap";
            label = "SKMO";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        up_left: up_left {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_LEFT";
            bindings = <&kp LEFT>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        down_right: down_right {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_RIGHT";
            bindings = <&kp RIGHT>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        left_right_up_down: left_right_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "LEFT_RIGHT_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&up_left>, <&down_right>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp BACKSPACE   &kp FR_COMMA   &kp FR_DOT       &kp FR_P       &kp FR_Y    &kp FR_F  &kp FR_G       &kp FR_C         &kp FR_R     &kp FR_L
&mt LCTRL FR_A  &mt LALT FR_O  &mt LSHIFT FR_E  &mt LGUI FR_I  &kp FR_U    &kp FR_D  &mt RGUI FR_H  &mt RSHIFT FR_T  &lt 9 FR_N   &mt RCTRL FR_S
&kp FR_APOS     &kp FR_Q       &kp FR_J         &kp FR_K       &kp FR_X    &kp FR_B  &kp FR_M       &kp FR_W         &kp FR_V     &kp FR_Z
&mo 8           &sltog 5 1                                                                                           &lt 5 SPACE  &sltog 2 2
            >;

            sensor-bindings = <&left_right_up_down>;
        };

        shift {
            bindings = <
&trans                &kp FR_SEMI        &kp FR_COLON         &kp LS(FR_P)       &kp LS(FR_Y)    &kp LS(FR_F)  &kp LS(FR_G)       &kp LS(FR_C)         &kp LS(FR_R)    &kp LS(FR_L)
&mt LCTRL LS(FR_A)    &mt LALT LS(FR_O)  &mt LSHIFT LS(FR_E)  &mt LGUI LS(FR_I)  &kp LS(FR_U)    &kp LS(FR_D)  &mt RGUI LS(FR_H)  &mt RSHIFT LS(FR_T)  &lt 8 LS(FR_N)  &mt RCTRL LS(FR_S)
&kp FR_DOUBLE_QUOTES  &kp LS(FR_Q)       &kp LS(FR_J)         &kp LS(FR_K)       &kp LS(FR_X)    &kp LS(FR_B)  &kp LS(FR_M)       &kp LS(FR_W)         &kp LS(FR_V)    &kp LS(FR_Z)
&trans                &caps_word                                                                                                                       &kp ENTER       &trans
            >;
        };

        Symbols {
            bindings = <
&kp FR_GRAVE  &kp FR_LEFT_BRACKET  &kp FR_LEFT_BRACE  &kp FR_LEFT_PARENTHESIS  &kp FR_LESS_THAN    &kp FR_GREATER_THAN  &kp FR_RIGHT_PARENTHESIS  &kp FR_RIGHT_BRACE  &kp FR_RIGHT_BRACKET  &kp FR_ASTERISK
&kp FR_AT     &kp FR_UNDER         &kp FR_MINUS       &kp FR_EQUAL             &trans              &trans               &kp FR_SLASH              &kp FR_PIPE         &kp FR_BACKSLASH      &kp FR_PLUS
&kp FR_AMPS   &kp FR_EXCL          &kp FR_PLUS        &kp FR_HASH              &trans              &kp FR_TILDE         &kp FR_PERCENT            &trans              &trans                &trans
&trans        &sltog2 3 3                                                                                                                                             &to 0                 &trans
            >;
        };

        Numbers {
            bindings = <
&kp FR_LESS_THAN  &kp FR_LEFT_BRACKET  &kp FR_LEFT_BRACE  &kp FR_LEFT_PARENTHESIS  &kp FR_GRAVE     &kp FR_COMMA  &kp FR_N7  &kp FR_N8  &kp FR_N9  &kp FR_STAR
&kp FR_AT         &kp FR_QUESTION      &kp FR_MINUS       &kp FR_SLASH             &kp BACKSLASH    &kp FR_DOT    &kp FR_N4  &kp FR_N5  &kp FR_N6  &kp FR_PLUS
&kp FR_CARET      &kp FR_PERCENT       &kp FR_EQUAL       &kp FR_HASH              &kp FR_DOLLAR    &kp FR_N0     &kp FR_N1  &kp FR_N2  &kp FR_N3  &kp FR_FSLH
&trans            &trans                                                                                                                &to 0      &tog 3
            >;
        };

        shift_symbols {
            bindings = <
&kp FR_GREATER_THAN  &kp FR_RIGHT_BRACKET  &kp FR_RIGHT_BRACE  &kp FR_RIGHT_PARENTHESIS  &kp FR_GRAVE    &kp FR_COMMA  &kp FR_N7  &kp FR_N8  &kp FR_N9  &kp FR_STAR
&kp FR_AMPS          &kp FR_EXCL           &kp FR_UNDER        &kp FR_FSLH               &kp FR_PIPE     &kp FR_DOT    &kp FR_N4  &kp FR_N5  &kp FR_N6  &kp FR_PLUS
&grave_hat           &kp FR_PERCENT        &kp FR_PLUS         &kp FR_HASH               &kp FR_EURO     &kp FR_N0     &kp FR_N1  &kp FR_N2  &kp FR_N3  &kp FR_FSLH
&trans               &trans                                                                                                                  &to 0      &trans
            >;
        };

        Nav {
            bindings = <
&kp ESCAPE    &trans        &trans        &trans        &trans              &trans  &trans    &kp UP    &trans     &kp BACKSPACE
&kp TAB       &trans        &trans        &trans        &trans              &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp ENTER
&kp LG(FR_Z)  &kp LG(FR_X)  &kp LG(FR_C)  &kp LG(FR_V)  &kp LS(LG(FR_V))    &trans  &trans    &trans    &trans     &trans
&trans        &trans                                                                                    &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(FR_Z) LG(LS(FR_Z))>;
        };

        Config {
            bindings = <
&bootloader  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3    &trans  &trans  &trans  &trans  &trans
&trans       &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3     &trans  &trans  &trans  &trans  &trans
&trans       &bt BT_CLR     &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans
&trans       &to 0                                                                                 &to 0   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_DEC C_BRI_UP>;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_AC_SCROLL_DOWN C_AC_SCROLL_UP>;
        };

        volume {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        layer_7 {
            bindings = <
&trans  &kp FR_UMLAUT    &kp FR_CARET  &kp FR_LEFT_PARENTHESIS  &kp FR_CARET    &trans  &kp FR_RIGHT_PARENTHESIS  &kp FR_C_CEDILLA  &trans  &trans
&trans  &kp FR_QUESTION  &kp FR_EURO   &kp FR_EXCL              &trans          &trans  &trans                    &trans            &trans  &kp FR_DOLLAR
&trans  &trans           &trans        &trans                   &trans          &trans  &trans                    &trans            &trans  &trans
&trans  &trans                                                                                                                      &trans  &trans
            >;
        };

        layer_9 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
        #include "corneish_zen.l_alpha-HD-vb.dtsi"  // base (alpha) layer (& related adaptive layers)
        #include "corneish_zen.l_layers.dtsi"  // all other (common) layers (shouldn't vary)
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
