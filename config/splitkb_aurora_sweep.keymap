/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define SMB 1

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Symbols {
            bindings = <&mo 2>;
            key-positions = <18 19>;
        };

        Symbols2 {
            bindings = <&mo 2>;
            key-positions = <11 10>;
        };
    };

    macros {
        delete_word: delete_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LEFT)) &kp BACKSPACE>;
            label = "DELETE_WORD";
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>;
            label = "A_GRAVE";
        };

        e_grave: e_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp E>;
            label = "E_GRAVE";
        };

        u_grave: u_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp U>;
            label = "U_GRAVE";
        };

        smart_space: smart_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "SMART_SPACE";
        };
    };

    behaviors {
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pars: pars {
            compatible = "zmk,behavior-mod-morph";
            label = "PARS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETS";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        braces: braces {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACES";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        less_greater_than: less_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "LESS_GREATER_THAN";
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grave_hat: grave_hat {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_HAT";
            bindings = <&kp GRAVE>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_grave_macro: a_grave_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "A_GRAVE_MACRO";
            #binding-cells = <0>;
            bindings = <&kp A>, <&a_grave>;
        };

        e_grave_macro: e_grave_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "E_GRAVE_MACRO";
            #binding-cells = <0>;
            bindings = <&kp E>, <&e_grave>;
        };

        u_grave_macro: u_grave_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "U_GRAVE_MACRO";
            #binding-cells = <0>;
            bindings = <&kp U>, <&u_grave>;
        };

        space_enter: space_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp ENTER>;
        };

        multi_space: multi_space {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTI_SPACE";
            bindings = <&kp SPACE>, <&kp ENTER>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        symbol_layer: symbol_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_LAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };

        left_home_row_mod: left_home_row_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOME_ROW_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 32>;
        };

        right_home_row_mod: right_home_row_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOME_ROW_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <0 1 3 4 10 11 12 13 14 20 21 22 23 24 30 31 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&grave_hat                  &comma_semicolon           &dot_colon                   &kp P                      &kp Y    &kp F  &kp G                       &kp C                         &kp R                       &kp L
&left_home_row_mod LCTRL A  &left_home_row_mod LALT O  &left_home_row_mod LSHIFT E  &left_home_row_mod LGUI I  &kp U    &kp D  &right_home_row_mod RGUI H  &right_home_row_mod RSHIFT T  &right_home_row_mod RALT N  &right_home_row_mod RCTRL S
&kp APOS                    &kp Q                      &kp J                        &kp K                      &kp X    &kp B  &kp M                       &kp W                         &kp V                       &kp Z
&lt 3 BACKSPACE             &to 2                                                                                                                                                        &symbol_layer 2 2           &multi_space
            >;
        };

        Numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp EQUAL     &kp N7  &kp N8  &kp N9  &kp STAR
&trans  &trans  &trans  &trans  &trans    &kp NUMBER_0  &kp N4  &kp N5  &kp N6  &kp PLUS
&trans  &trans  &trans  &trans  &trans    &kp N0        &kp N1  &kp N2  &kp N3  &kp FSLH
&trans  &to 0                                                           &trans  &trans
            >;
        };

        Symbols {
            bindings = <
&less_greater_than  &brackets    &braces    &pars            &kp AT           &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp STAR
&kp AT              &kp EXCL     &kp MINUS  &kp FSLH         &kp BACKSLASH    &kp N0     &kp N4  &kp N5  &kp N6  &kp PLUS
&kp AMPS            &kp PERCENT  &kp EQUAL  &kp NON_US_HASH  &kp DOLLAR       &kp N0     &kp N1  &kp N2  &kp N3  &kp FSLH
&trans              &to 0                                                                                &trans  &trans
            >;
        };

        Nav {
            bindings = <
&kp ESCAPE    &trans     &kp TAB    &trans     &trans           &trans  &trans    &kp UP    &trans     &trans
&trans        &trans     &trans     &trans     &trans           &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&kp LG(Z)     &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(V))    &trans  &trans    &trans    &trans     &to 4
&delete_word  &trans                                                                        &trans     &trans
            >;
        };

        Config {
            bindings = <
&bootloader  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &trans    &trans  &kp C_BRI_DEC  &kp C_BRI_UP  &trans  &trans
&trans       &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &trans    &trans  &trans         &trans        &trans  &trans
&trans       &bt BT_CLR     &trans         &trans         &trans    &trans  &trans         &trans        &trans  &trans
&trans       &to 0                                                                                       &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
    };
};
