/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "keys_fr_belgian.h"

#define SMB 1

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sl { ignore-modifiers; };

/ {
    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp RETURN>;
            key-positions = <18 19>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        a-acute {
            bindings = <&a_grave>;
            key-positions = <10 0>;
            layers = <0>;
        };

        e-grave {
            bindings = <&e_grave>;
            key-positions = <12 2>;
            layers = <0>;
        };

        u-grave {
            bindings = <&u_grave>;
            key-positions = <4 14>;
            layers = <0>;
        };

        e-acute {
            bindings = <&e_acute>;
            key-positions = <12 22>;
            layers = <0>;
        };

        back_space_cb {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        Switch-layer {
            bindings = <&mo 4>;
            key-positions = <16 17 18 19>;
        };
    };

    macros {
        delete_word: delete_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LEFT)) &kp BACKSPACE>;
            label = "DELETE_WORD";
        };

        smart_space: smart_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "SMART_SPACE";
        };

        e_grave: e_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp E>;
            label = "E_GRAVE";
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS &kp E>;
            label = "E_ACUTE";
        };

        a_grave: a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>;
            label = "A_GRAVE";
        };

        u_grave: u_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp U>;
            label = "U_GRAVE";
        };
    };

    behaviors {
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pars: pars {
            compatible = "zmk,behavior-mod-morph";
            label = "PARS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETS";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        braces: braces {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACES";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        less_greater_than: less_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "LESS_GREATER_THAN";
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grave_hat: grave_hat {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_HAT";
            bindings = <&kp GRAVE>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sltog: sltog {
            compatible = "zmk,behavior-hold-tap";
            label = "SLTOG";
            bindings = <&mo>, <&symbol_options>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tri_space: tri_space {
            compatible = "zmk,behavior-hold-tap";
            label = "TRI_SPACE";
            bindings = <&mo>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <16 17 18 7>;
        };

        stkp: stkp {
            compatible = "zmk,behavior-hold-tap";
            label = "STKP";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        symbol_options: symbol_options {
            compatible = "zmk,behavior-mod-morph";
            label = "SYMBOL_OPTIONS";
            bindings = <&sl 1>, <&to 1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slmo: slmo {
            compatible = "zmk,behavior-hold-tap";
            label = "SLMO";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        sl_backspace: sl_backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_BACKSPACE";
            bindings = <&mo>, <&delete_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        question_excl: question_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCL";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&grave_hat       &comma_semicolon             &dot_colon    &kp P       &kp Y    &kp F  &kp G       &kp C         &kp R       &kp L
&mt LCTRL A      &mt LALT O                   &mt LSHIFT E  &mt LGUI I  &kp U    &kp D  &mt RGUI H  &mt RSHIFT T  &mt RALT N  &mt RCTRL S
&kp APOS         &kp Q                        &kp J         &kp K       &kp X    &kp B  &kp M       &kp W         &kp V       &kp Z
&lt 3 BACKSPACE  &stkp LEFT_SHIFT LEFT_SHIFT                                                                      &sltog 1 1  &lt 3 SPACE
            >;
        };

        Symbols {
            bindings = <
&less_greater_than  &brackets       &braces    &pars     &none            &kp COMMA  &kp N7  &kp N8  &kp N9  &kp STAR
&kp AT              &question_excl  &kp MINUS  &kp FSLH  &kp BACKSLASH    &kp DOT    &kp N4  &kp N5  &kp N6  &kp PLUS
&kp AMPS            &kp PERCENT     &kp EQUAL  &kp HASH  &kp DOLLAR       &kp N0     &kp N1  &kp N2  &kp N3  &kp FSLH
&trans              &trans                                                                           &to 0   &trans
            >;
        };

        Symbols2 {
            bindings = <
&kp GREATER_THAN  &kp RBKT  &kp RBRC   &kp RPAR  &trans    &trans  &trans  &trans  &trans  &trans
&trans            &kp EXCL  &kp UNDER  &kp PIPE  &trans    &trans  &trans  &trans  &trans  &trans
&trans            &trans    &kp PLUS   &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans            &trans                                                           &trans  &trans
            >;
        };

        Nav {
            bindings = <
&kp ESCAPE  &trans     &trans     &trans     &trans           &trans  &trans    &kp UP    &trans     &trans
&kp TAB     &trans     &trans     &trans     &trans           &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp ENTER
&kp LG(Z)   &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(V))    &trans  &trans    &trans    &trans     &to 4
&trans      &trans                                                                        &trans     &kp RETURN
            >;
        };

        Config {
            bindings = <
&bootloader  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3    &trans  &kp C_BRI_DEC  &kp C_BRI_UP  &trans  &trans
&trans       &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3     &trans  &trans         &trans        &trans  &trans
&trans       &bt BT_CLR     &trans         &trans         &trans           &trans  &trans         &trans        &trans  &trans
&trans       &to 0                                                                                              &to 0   &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
    };
};
